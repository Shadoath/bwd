<%= render partial: 'restaurant_header', locals: {restaurant: @restaurant} %>
<div class="restaurant-filter universal-flex-container">
  <div class="row">
    <div class="small-12 columns">
      Tag Filter: <span id="filter-count"></span>
      <%= render partial: "tags/filter", locals: {tags: @restaurant.items.map(&:tags).flatten.uniq.sort_by(&:name)} %>
    </div>
  </div>

</div>
<div class="restaurant-show">
  <div class="grid cards-container">
    <% @items.each do |item| %>
      <%= render partial: "items/card", locals: {restaurant: @restaurant, item: item} %>
    <% end %>
  </div>
</div>
<script>

  var filters = [];
  var $grid;
  $(function(){
    $grid = $('.grid').imagesLoaded(function(){

      $grid.isotope({
        itemSelector: '.card',
        layoutMode: 'fitRows'
      });
    })

    $('.filter-button-group').on( 'click', 'button', function() {
      var filterValue = $(this).attr('data-filter');
      console.log("Filtering by: " +filterValue);
      if (filterValue == "*"){
        filters = [];
        $(".tag-block").removeClass("active");
        $("#show-all-tags").addClass("active");
      } else {
        $("#show-all-tags").removeClass("active");

      }

      if($.inArray(filterValue, filters) == -1){
        console.log("pushing");
        $(this).parent().addClass("active");
        filters.push(filterValue);
      } else{
        console.log("Found, removing");
        $(this).parent().removeClass("active");
        filters = $.grep(filters, function(value) {
          return value != filterValue;
        });
      }

      console.log("filters = " + filters.join(", "));
      $grid.isotope({ filter: filters.join("") });
      updateFilterCount();
    });
  });

  function updateFilterCount() {
    $('#filter-count').text( $grid.data('isotope').filteredItems.length + ' items' );
  }
  <%# mql_small.addListener(e => { mqlChange(e, 2) }); %>
  <%# mql_medium.addListener(e => { mqlChange(e, 3) }); %>
  <%# mql_large.addListener(e => { mqlChange(e, 4) }); %>
  <%# function mqlChange(e, i){ %>
  <%#   if(e.matches){ %>
  <%#     cardsPerRow = i; %>
  <%#     updateCardHeight(); %>
  <%#   } %>
  <%# } %>
  <%# function updateCardHeight(){ %>
  <%#   let filteredCards = $grid.data('isotope').filteredItems; %>
  <%#   let cardGroups = []; %>
  <%#   filteredCards.forEach(c => $(c.element).height('auto')); %>
  <%#   while(filteredCards.length > 0) cardGroups.push(filteredCards.splice(0, cardsPerRow)); %>
  <%#   cardGroups.forEach(function(cards) { %>
  <%#     let height = Math.max(...cards.map(c => c.element.offsetHeight)); %>
  <%#     cards.forEach(function(card) { %>
  <%#       $(card.element).height(height); %>
  <%#     }); %>
  <%#   }); %>
  <%#   $grid.isotope(); %>
  <%# } %>
</script>
