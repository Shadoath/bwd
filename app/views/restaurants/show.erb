<%= render partial: 'restaurant_header', locals: {restaurant: @restaurant} %>
<%= render partial: "tags/filter", locals: {tags: @items.map(&:tags).flatten.uniq.sort_by(&:name)} %>

<div class="restaurant-show">
  <div class="row grid cards-container">
    <% @items.each do |item| %>
      <%= render partial: "items/card", locals: {restaurant: @restaurant, item: item} %>
    <% end %>
  </div>
</div>
<script>
  var filters = [];
  var $grid;
  $(function(){
    $grid = $('.grid').imagesLoaded(function(){
      $grid.isotope({
        itemSelector: '.card',
        layoutMode: 'fitRows',
        getSortData: {
          name: '.card-title a',
          rating: '[data-item-review-rating] parseInt', // value of attribute
        },
        sortAscending: {
          name: true,
          rating: false,
        }
      });
    });
    setTimeout(function(){
      $grid.isotope({ sortBy: 'rating' });
    }, 500);


    $('[data-filter]').on( 'click', function() {
      changeTagFilter($(this).attr('data-filter'));
    });
  });

  function changeTagFilter(filterValue){
    console.log("changeTagFilter: " +filterValue);
    if (filterValue == "*"){
      filters = [];
      $('[data-filter]').removeClass("active")
      $("#show-all-tags").addClass("active");
    } else {
      $("#show-all-tags").removeClass("active");
    }

    if($.inArray(filterValue, filters) == -1){
      console.log("Adding");
      $('[data-filter="'+filterValue+'"]').addClass("active")
      filters.push(filterValue);
    } else{
      console.log("Removing");
      $('[data-filter="'+filterValue+'"]').removeClass("active")
      filters = $.grep(filters, function(value) {
        return value != filterValue;
      });
    }

    console.log("filters = " + filters.join(", "));
    $grid.isotope({ filter: filters.join("") });
    updateFilterCount();
  }
  function updateFilterCount() {
    let count = $grid.data('isotope').filteredItems.length;
    let things_found = " items";
    if(count == 1 ){
      things_found = " item";
    }
    $('#filter-count').text( $grid.data('isotope').filteredItems.length + things_found  );
  }
  <%# mql_small.addListener(e => { mqlChange(e, 2) }); %>
  <%# mql_medium.addListener(e => { mqlChange(e, 3) }); %>
  <%# mql_large.addListener(e => { mqlChange(e, 4) }); %>
  <%# function mqlChange(e, i){ %>
  <%#   if(e.matches){ %>
  <%#     cardsPerRow = i; %>
  <%#     updateCardHeight(); %>
  <%#   } %>
  <%# } %>
  <%# function updateCardHeight(){ %>
  <%#   let filteredCards = $grid.data('isotope').filteredItems; %>
  <%#   let cardGroups = []; %>
  <%#   filteredCards.forEach(c => $(c.element).height('auto')); %>
  <%#   while(filteredCards.length > 0) cardGroups.push(filteredCards.splice(0, cardsPerRow)); %>
  <%#   cardGroups.forEach(function(cards) { %>
  <%#     let height = Math.max(...cards.map(c => c.element.offsetHeight)); %>
  <%#     cards.forEach(function(card) { %>
  <%#       $(card.element).height(height); %>
  <%#     }); %>
  <%#   }); %>
  <%#   $grid.isotope(); %>
  <%# } %>
</script>
